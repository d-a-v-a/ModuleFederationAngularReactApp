import { UserOptions, FederationHost } from '@module-federation/runtime-core';

type ManifestFile<T extends RemoteConfig = RemoteConfig> = {
    [key: string]: string | T;
};
type Manifest<T extends RemoteConfig = RemoteConfig> = {
    [key: string]: T;
};
type RemoteConfig = {
    name: string;
    type: 'module' | 'script';
    remoteEntry: string;
    [key: string]: unknown;
} | {
    name: string;
    type: 'module' | 'script';
    entry: string;
    [key: string]: unknown;
};
type InitFederationOptions = {
    runtimeOptions?: UserOptions;
};
declare function initFederation(manifest: string | ManifestFile, options?: InitFederationOptions): Promise<FederationHost>;
declare function toRuntimeConfig(config: Manifest<RemoteConfig>, options?: InitFederationOptions): UserOptions;
declare function getManifest<T extends Manifest>(): T;
declare function setManifest(manifest: ManifestFile): Promise<void>;
declare function loadManifest<T extends Manifest = Manifest>(configFile: string): Promise<T>;
declare function parseConfig(config: ManifestFile): Manifest;

type LoadRemoteModuleOptions<T = any> = {
    remoteName: string;
    exposedModule: string;
    fallback?: T;
};
declare function loadRemoteModule<T = any>(remoteName: string, exposedModule: string): Promise<T>;
declare function loadRemoteModule<T = any>(options: LoadRemoteModuleOptions): Promise<T>;

export { getManifest, initFederation, loadManifest, loadRemoteModule, parseConfig, setManifest, toRuntimeConfig };
export type { InitFederationOptions, LoadRemoteModuleOptions, Manifest, ManifestFile, RemoteConfig };
